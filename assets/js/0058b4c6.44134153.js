"use strict";(self.webpackChunkmegatron_dev_docs=self.webpackChunkmegatron_dev_docs||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Projects","items":[{"type":"category","label":"Authentication System","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Auth System Overview","href":"/docs/projects/auth-system/01-overview","docId":"projects/auth-system/01-overview","unlisted":false},{"type":"link","label":"Keycloak Setup with Docker Compose","href":"/docs/projects/auth-system/02-keycloak-setup-docker-compose","docId":"projects/auth-system/02-keycloak-setup-docker-compose","unlisted":false},{"type":"link","label":"Keycloak Infra Provisioning","href":"/docs/projects/auth-system/03-terraform-keycloak-infra-provisioning","docId":"projects/auth-system/03-terraform-keycloak-infra-provisioning","unlisted":false},{"type":"link","label":"React + Keycloak Integration","href":"/docs/projects/auth-system/04-react-keycloak-integration","docId":"projects/auth-system/04-react-keycloak-integration","unlisted":false}],"href":"/docs/projects/auth-system/"},{"type":"category","label":"megatron-kafka-lab","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Kafka: From Legacy Integration to Real-Time Event Streaming","href":"/docs/projects/megatron-kafka-lab/overview","docId":"projects/megatron-kafka-lab/overview","unlisted":false},{"type":"link","label":"Kafka = Railway Analogy","href":"/docs/projects/megatron-kafka-lab/kafka-basic-concepts","docId":"projects/megatron-kafka-lab/kafka-basic-concepts","unlisted":false},{"type":"link","label":"Kafka Lab via Docker Compose (KRaft & ZooKeeper)","href":"/docs/projects/megatron-kafka-lab/kafka-setup-docker-compose","docId":"projects/megatron-kafka-lab/kafka-setup-docker-compose","unlisted":false},{"type":"link","label":"Kafka Partitions","href":"/docs/projects/megatron-kafka-lab/kafka-partition","docId":"projects/megatron-kafka-lab/kafka-partition","unlisted":false},{"type":"link","label":"Kafka Offsets","href":"/docs/projects/megatron-kafka-lab/kafka-offset","docId":"projects/megatron-kafka-lab/kafka-offset","unlisted":false},{"type":"link","label":"Kafka Consumers & Consumer Groups","href":"/docs/projects/megatron-kafka-lab/kafka-consumer-group","docId":"projects/megatron-kafka-lab/kafka-consumer-group","unlisted":false},{"type":"link","label":"Kafka Console Testing Guide (Docker Setup)","href":"/docs/projects/megatron-kafka-lab/kafka-console-guide","docId":"projects/megatron-kafka-lab/kafka-console-guide","unlisted":false},{"type":"link","label":"Kafka Advanced Console Lab","href":"/docs/projects/megatron-kafka-lab/kafka-advanced-console-lab","docId":"projects/megatron-kafka-lab/kafka-advanced-console-lab","unlisted":false}]}],"collapsed":true,"collapsible":true,"href":"/docs/projects/auth-system/01-overview"},{"type":"category","label":"Architecture","items":[{"type":"category","label":"E-Commerce System ADR Overview","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"User Initial Load & Personalized Homepage","href":"/docs/architecture/e-commerce/01-home-page","docId":"architecture/e-commerce/01-home-page","unlisted":false},{"type":"link","label":"Megatron Store - Database Design","href":"/docs/architecture/e-commerce/02-megatron-store","docId":"architecture/e-commerce/02-megatron-store","unlisted":false},{"type":"link","label":"Megatron Store - Database Design Enhancements","href":"/docs/architecture/e-commerce/03-megatron-store-enhancement","docId":"architecture/e-commerce/03-megatron-store-enhancement","unlisted":false},{"type":"link","label":"Megatron Store \u2013 Order Checkout Flow","href":"/docs/architecture/e-commerce/04-megatron-store-order-checkout","docId":"architecture/e-commerce/04-megatron-store-order-checkout","unlisted":false}],"href":"/docs/architecture/e-commerce/"}],"collapsed":true,"collapsible":true,"href":"/docs/architecture/e-commerce/01-home-page"},{"type":"category","label":"Notes","items":[{"type":"link","label":"Docker Tips for Java Projects","href":"/docs/notes/docker-tips","docId":"notes/docker-tips","unlisted":false},{"type":"link","label":"index","href":"/docs/notes/","docId":"notes/index","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/docs/notes/docker-tips"}]},"docs":{"architecture/e-commerce/01-home-page":{"id":"architecture/e-commerce/01-home-page","title":"User Initial Load & Personalized Homepage","description":"Status","sidebar":"docs"},"architecture/e-commerce/02-megatron-store":{"id":"architecture/e-commerce/02-megatron-store","title":"Megatron Store - Database Design","description":"This document explains the database schema and flow for the Megatron Store e-commerce application.","sidebar":"docs"},"architecture/e-commerce/03-megatron-store-enhancement":{"id":"architecture/e-commerce/03-megatron-store-enhancement","title":"Megatron Store - Database Design Enhancements","description":"This document explains the database schema and flow for the Megatron Store e-commerce application.","sidebar":"docs"},"architecture/e-commerce/04-megatron-store-order-checkout":{"id":"architecture/e-commerce/04-megatron-store-order-checkout","title":"Megatron Store \u2013 Order Checkout Flow","description":"This document explains the Order Checkout architecture and flow in Megatron Store, using a scalable, event-driven, microservices approach. The system leverages REST for synchronous calls and Kafka for asynchronous event-driven communication. All services are built with Spring Boot, use MySQL for persistence, and Redis for caching.","sidebar":"docs"},"architecture/e-commerce/index":{"id":"architecture/e-commerce/index","title":"E-Commerce System ADR Overview","description":"An Architecture Decision Record (ADR) is a documented process used in e-commerce systems to record important decisions related to system design. The main purpose is to ensure that the team knows which architectural choices were made, the reasons behind them, and what alternatives were considered.","sidebar":"docs"},"notes/docker-tips":{"id":"notes/docker-tips","title":"Docker Tips for Java Projects","description":"Use Multi-Stage Builds","sidebar":"docs"},"notes/index":{"id":"notes/index","title":"index","description":"test","sidebar":"docs"},"projects/auth-system/01-overview":{"id":"projects/auth-system/01-overview","title":"Auth System Overview","description":"This document provides a high-level overview of the authentication system used in the Megatron project. The system is based on Keycloak for identity and access management, integrated with React as frontend and Spring Boot as backend.","sidebar":"docs"},"projects/auth-system/02-keycloak-setup-docker-compose":{"id":"projects/auth-system/02-keycloak-setup-docker-compose","title":"Keycloak Setup with Docker Compose","description":"In this step, we will set up a Keycloak server locally using Docker Compose, which will act as our Identity Provider (IdP) for authentication.","sidebar":"docs"},"projects/auth-system/03-terraform-keycloak-infra-provisioning":{"id":"projects/auth-system/03-terraform-keycloak-infra-provisioning","title":"Keycloak Infra Provisioning","description":"Provision Keycloak realms and OpenID clients using Terraform. Everything is containerized using Docker for consistent, repeatable infra setup \u2014 especially useful for development environments.","sidebar":"docs"},"projects/auth-system/04-react-keycloak-integration":{"id":"projects/auth-system/04-react-keycloak-integration","title":"React + Keycloak Integration","description":"Now that Keycloak is running, let\'s integrate it with a React frontend using the keycloak-js and react-keycloak libraries.","sidebar":"docs"},"projects/auth-system/index":{"id":"projects/auth-system/index","title":"Authentication System","description":"Welcome to the documentation for the Authentication System project. This section provides an overview, setup instructions, and guides for integrating authentication into your applications.","sidebar":"docs"},"projects/megatron-kafka-lab/kafka-advanced-console-lab":{"id":"projects/megatron-kafka-lab/kafka-advanced-console-lab","title":"Kafka Advanced Console Lab","description":"This lab extends the basics and shows advanced console-only Kafka testing flows.","sidebar":"docs"},"projects/megatron-kafka-lab/kafka-basic-concepts":{"id":"projects/megatron-kafka-lab/kafka-basic-concepts","title":"Kafka = Railway Analogy","description":"Kafka concepts can be simplified using a train system analogy.","sidebar":"docs"},"projects/megatron-kafka-lab/kafka-console-guide":{"id":"projects/megatron-kafka-lab/kafka-console-guide","title":"Kafka Console Testing Guide (Docker Setup)","description":"This guide explains how to test Kafka basics using console producer/consumer inside Docker.","sidebar":"docs"},"projects/megatron-kafka-lab/kafka-consumer-group":{"id":"projects/megatron-kafka-lab/kafka-consumer-group","title":"Kafka Consumers & Consumer Groups","description":"---","sidebar":"docs"},"projects/megatron-kafka-lab/kafka-offset":{"id":"projects/megatron-kafka-lab/kafka-offset","title":"Kafka Offsets","description":"---","sidebar":"docs"},"projects/megatron-kafka-lab/kafka-partition":{"id":"projects/megatron-kafka-lab/kafka-partition","title":"Kafka Partitions","description":"---","sidebar":"docs"},"projects/megatron-kafka-lab/kafka-setup-docker-compose":{"id":"projects/megatron-kafka-lab/kafka-setup-docker-compose","title":"Kafka Lab via Docker Compose (KRaft & ZooKeeper)","description":"This repository helps you run Apache Kafka locally in two ways:","sidebar":"docs"},"projects/megatron-kafka-lab/overview":{"id":"projects/megatron-kafka-lab/overview","title":"Kafka: From Legacy Integration to Real-Time Event Streaming","description":"1. Before Kafka Systems","sidebar":"docs"}}}}')}}]);