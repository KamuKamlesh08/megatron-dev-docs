"use strict";(self.webpackChunkmegatron_dev_docs=self.webpackChunkmegatron_dev_docs||[]).push([[9197],{6381:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"projects/megatron-kafka-lab/kafka-offset","title":"Kafka Offsets","description":"---","source":"@site/docs/projects/megatron-kafka-lab/05-kafka-offset.md","sourceDirName":"projects/megatron-kafka-lab","slug":"/projects/megatron-kafka-lab/kafka-offset","permalink":"/docs/projects/megatron-kafka-lab/kafka-offset","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"docs","previous":{"title":"Kafka Partitions","permalink":"/docs/projects/megatron-kafka-lab/kafka-partition"},"next":{"title":"Kafka Consumers & Consumer Groups","permalink":"/docs/projects/megatron-kafka-lab/kafka-consumer-group"}}');var r=n(4848),i=n(8453);const a={},l="Kafka Offsets",o={},c=[{value:"1. What is an Offset?",id:"1-what-is-an-offset",level:2},{value:"2. Why are Offsets Needed?",id:"2-why-are-offsets-needed",level:2},{value:"3. Benefits of Offsets",id:"3-benefits-of-offsets",level:2},{value:"a) Progress Tracking",id:"a-progress-tracking",level:3},{value:"b) Fault Tolerance",id:"b-fault-tolerance",level:3},{value:"c) Parallelism",id:"c-parallelism",level:3},{value:"4. What if Offsets Did Not Exist?",id:"4-what-if-offsets-did-not-exist",level:2},{value:"5. Who Manages Offsets?",id:"5-who-manages-offsets",level:2},{value:"6. Flow of Offsets (Step by Step)",id:"6-flow-of-offsets-step-by-step",level:2},{value:"Quick Recap",id:"quick-recap",level:2}];function h(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"kafka-offsets",children:"Kafka Offsets"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"1-what-is-an-offset",children:"1. What is an Offset?"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["An ",(0,r.jsx)(s.strong,{children:"Offset"})," is the position of a message inside a partition."]}),"\n",(0,r.jsxs)(s.li,{children:["Each message in a partition is assigned a unique, incremental number called the ",(0,r.jsx)(s.strong,{children:"Offset"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Imagine a ",(0,r.jsx)(s.strong,{children:"train compartment"})," (partition)."]}),"\n",(0,r.jsxs)(s.li,{children:["Every seat in that compartment has a ",(0,r.jsx)(s.strong,{children:"seat number"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["A passenger (message) sitting on a seat represents a message stored at that ",(0,r.jsx)(s.strong,{children:"offset"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"2-why-are-offsets-needed",children:"2. Why are Offsets Needed?"}),"\n",(0,r.jsxs)(s.p,{children:["Offsets indicate ",(0,r.jsx)(s.strong,{children:"where a consumer is in the log"}),"."]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Without offsets, a consumer would not know which messages it has already read."}),"\n",(0,r.jsxs)(s.li,{children:["This could cause:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Duplication"})," (re-reading the same messages)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Loss"})," (skipping some messages)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"A ticket checker (consumer) verifies passengers seat by seat."}),"\n",(0,r.jsxs)(s.li,{children:["If he does not track seat numbers (offsets):","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["He may ",(0,r.jsx)(s.strong,{children:"check the same passenger twice"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["Or ",(0,r.jsx)(s.strong,{children:"miss some passengers entirely"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"3-benefits-of-offsets",children:"3. Benefits of Offsets"}),"\n",(0,r.jsx)(s.h3,{id:"a-progress-tracking",children:"a) Progress Tracking"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Consumers know exactly up to which message they have consumed."}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Analogy:"})," Ticket checker notes: \u201cChecked till Seat #42 in Compartment-1.\u201d"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"b-fault-tolerance",children:"b) Fault Tolerance"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"If a consumer crashes, it can resume from the last committed offset."}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Analogy:"})," Ticket checker goes for a break, then returns and starts from Seat #43."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"c-parallelism",children:"c) Parallelism"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Each consumer group maintains its own offsets independently."}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Analogy:"})," Multiple ticket checkers can work on the same train, each tracking their own compartments."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"4-what-if-offsets-did-not-exist",children:"4. What if Offsets Did Not Exist?"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Consumers would have to start from the beginning every time."}),"\n",(0,r.jsx)(s.li,{children:"This could lead to duplicate processing or skipped messages."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Without seat numbers, a ticket checker might re-check the ",(0,r.jsx)(s.strong,{children:"entire train"})," or miss passengers altogether."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"5-who-manages-offsets",children:"5. Who Manages Offsets?"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Kafka stores offsets in an ",(0,r.jsxs)(s.strong,{children:["internal topic called ",(0,r.jsx)(s.code,{children:"__consumer_offsets"})]}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["When a consumer processes a message, it ",(0,r.jsx)(s.strong,{children:"commits the offset"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["On restart, the consumer resumes from the ",(0,r.jsx)(s.strong,{children:"last committed offset"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The ticket checker verifies Seat #42 and writes it down in a ",(0,r.jsx)(s.strong,{children:"notebook"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["The notebook is like the ",(0,r.jsx)(s.code,{children:"__consumer_offsets"})," topic."]}),"\n",(0,r.jsx)(s.li,{children:"If the checker leaves and returns, he opens the notebook and continues from Seat #43."}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"6-flow-of-offsets-step-by-step",children:"6. Flow of Offsets (Step by Step)"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Passenger boards \u2192 Message produced and stored in a partition."}),"\n",(0,r.jsx)(s.li,{children:"Ticket checker arrives \u2192 Consumer fetches the message."}),"\n",(0,r.jsx)(s.li,{children:"Ticket checker verifies passenger \u2192 Message is processed."}),"\n",(0,r.jsx)(s.li,{children:"Ticket checker writes: \u201cSeat #42 checked\u201d \u2192 Offset is committed."}),"\n",(0,r.jsx)(s.li,{children:"Ticket checker comes back later and starts from Seat #43 \u2192 Consumer resumes from the next offset."}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"quick-recap",children:"Quick Recap"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Offset = Seat number in a compartment (partition)"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Purpose:"})," Track progress, enable fault tolerance, support parallelism"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Without offsets:"})," Risk of duplicate reads or missing messages"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Management:"})," Kafka handles offsets in the ",(0,r.jsx)(s.code,{children:"__consumer_offsets"})," topic"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Flow:"})," Read \u2192 Process \u2192 Commit \u2192 Resume"]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var t=n(6540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);