"use strict";(self.webpackChunkmegatron_dev_docs=self.webpackChunkmegatron_dev_docs||[]).push([[1418],{5365:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"projects/auth-system/03-terraform-keycloak-infra-provisioning","title":"Keycloak Infra Provisioning","description":"Provision Keycloak realms and OpenID clients using Terraform. Everything is containerized using Docker for consistent, repeatable infra setup \u2014 especially useful for development environments.","source":"@site/docs/projects/auth-system/03-terraform-keycloak-infra-provisioning.md","sourceDirName":"projects/auth-system","slug":"/projects/auth-system/03-terraform-keycloak-infra-provisioning","permalink":"/docs/projects/auth-system/03-terraform-keycloak-infra-provisioning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"03-terraform-keycloak-infra-provisioning","title":"Keycloak Infra Provisioning","sidebar_position":3},"sidebar":"docs","previous":{"title":"Keycloak Setup with Docker Compose","permalink":"/docs/projects/auth-system/02-keycloak-setup-docker-compose"},"next":{"title":"React + Keycloak Integration","permalink":"/docs/projects/auth-system/04-react-keycloak-integration"}}');var o=n(4848),l=n(8453);const s={id:"03-terraform-keycloak-infra-provisioning",title:"Keycloak Infra Provisioning",sidebar_position:3},t="Keycloak Infra Provisioning (Terraform + Docker)",a={},c=[{value:"Project Structure",id:"project-structure",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"main.tf",id:"maintf",level:2},{value:"Dockerfile",id:"dockerfile",level:2},{value:"Build Docker Image",id:"build-docker-image",level:2},{value:"Terraform Usage (via Docker)",id:"terraform-usage-via-docker",level:2},{value:"1. Initialize",id:"1-initialize",level:3},{value:"2. Plan",id:"2-plan",level:3},{value:"3. Apply",id:"3-apply",level:3},{value:"What\u2019s Being Created?",id:"whats-being-created",level:2},{value:"Output",id:"output",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Provider Not Found",id:"provider-not-found",level:3},{value:"Connection Refused",id:"connection-refused",level:3},{value:"References",id:"references",level:2}];function d(e){const r={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"keycloak-infra-provisioning-terraform--docker",children:"Keycloak Infra Provisioning (Terraform + Docker)"})}),"\n",(0,o.jsx)(r.p,{children:"Provision Keycloak realms and OpenID clients using Terraform. Everything is containerized using Docker for consistent, repeatable infra setup \u2014 especially useful for development environments."}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"keycloak-infra/\r\n\u251c\u2500\u2500 Dockerfile              # Container to run Terraform commands\r\n\u251c\u2500\u2500 main.tf                 # Terraform configuration (Keycloak provider, realm, clients)\r\n\u251c\u2500\u2500 terraform.tfstate       # (Generated) stores the state after apply\r\n\u251c\u2500\u2500 terraform.lock.hcl      # (Generated) locks provider versions\r\n\u2514\u2500\u2500 README.md               # You're here\n"})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Docker installed on your machine"}),"\n",(0,o.jsxs)(r.li,{children:["Running Keycloak server at ",(0,o.jsx)(r.code,{children:"http://localhost:8080"}),(0,o.jsx)(r.br,{}),"\n","(with default admin credentials: ",(0,o.jsx)(r.code,{children:"admin"})," / ",(0,o.jsx)(r.code,{children:"admin"}),")"]}),"\n",(0,o.jsx)(r.li,{children:"Internet access to pull Terraform provider plugins"}),"\n"]}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"maintf",children:"main.tf"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tf",children:'provider "keycloak" {\r\n  client_id     = "admin-cli"\r\n  username      = "admin"\r\n  password      = "admin"\r\n  url           = "http://host.docker.internal:8080"\r\n  realm         = "master"\r\n}\r\n\r\n# 1. Realm\r\nresource "keycloak_realm" "megatron" {\r\n  realm   = "megatron"\r\n  enabled = true\r\n\r\n  registration_allowed = true                # This enables "User registration" in Login tab\r\n  login_with_email_allowed = true            # Optional: login via email\r\n  duplicate_emails_allowed = false           # Optional: don\'t allow same email for multiple users\r\n  reset_password_allowed = true              # Optional: forgot password link\r\n  remember_me = true                         # Optional: Remember Me checkbox\r\n  verify_email = false                       # Optional: turn on email verification\r\n}\r\n\r\n# 2. Public Client (Frontend)\r\nresource "keycloak_openid_client" "megatron_ui" {\r\n  realm_id                     = keycloak_realm.megatron.id\r\n  client_id                    = "megatron-ui"\r\n  name                         = "megatron-ui"\r\n  access_type                  = "PUBLIC"\r\n  standard_flow_enabled        = true\r\n  implicit_flow_enabled        = false\r\n  direct_access_grants_enabled = false\r\n  root_url                     = "http://localhost:3000"\r\n  valid_redirect_uris          = ["http://localhost:3000/*"]\r\n  web_origins                  = ["*"]\r\n  pkce_code_challenge_method   = "S256"\r\n}\r\n\r\n# 3. Confidential Client (Backend)\r\nresource "keycloak_openid_client" "megatron_store" {\r\n  realm_id                     = keycloak_realm.megatron.id\r\n  client_id                    = "megatron-store"\r\n  name                         = "megatron-store"\r\n  access_type                  = "CONFIDENTIAL"\r\n  standard_flow_enabled        = true\r\n  service_accounts_enabled     = true\r\n  valid_redirect_uris          = ["http://localhost:8081/*"]\r\n  web_origins                  = []\r\n}\r\n\r\noutput "megatron_store_client_secret" {\r\n  value = keycloak_openid_client.megatron_store.client_secret\r\n  sensitive = true\r\n}\n'})}),"\n",(0,o.jsx)(r.h2,{id:"dockerfile",children:"Dockerfile"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-Dockerfile",children:'# Use official Terraform image\r\nFROM hashicorp/terraform:latest\r\n\r\nWORKDIR /app\r\n\r\nCOPY . .\r\n\r\nRUN chmod -R +x /app\r\n\r\nENTRYPOINT ["terraform"]\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"build-docker-image",children:"Build Docker Image"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"docker build -t keycloak-infra-provisioning .\n"})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"terraform-usage-via-docker",children:"Terraform Usage (via Docker)"}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Note:"})," Use ",(0,o.jsx)(r.code,{children:"host.docker.internal"})," to access Keycloak on your Windows host from inside the Docker container."]}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"1-initialize",children:"1. Initialize"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:'docker run --rm -v "%cd%":/app keycloak-infra-provisioning init\n'})}),"\n",(0,o.jsx)(r.h3,{id:"2-plan",children:"2. Plan"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:'docker run --rm -v "%cd%":/app keycloak-infra-provisioning plan\n'})}),"\n",(0,o.jsx)(r.h3,{id:"3-apply",children:"3. Apply"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:'docker run --rm -v "%cd%":/app keycloak-infra-provisioning apply -auto-approve\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"whats-being-created",children:"What\u2019s Being Created?"}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:(0,o.jsxs)(r.strong,{children:["Realm: ",(0,o.jsx)(r.code,{children:"megatron"})]})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Registration allowed"}),"\n",(0,o.jsx)(r.li,{children:"Remember me"}),"\n",(0,o.jsx)(r.li,{children:"Reset password enabled"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:(0,o.jsxs)(r.strong,{children:["Public Client: ",(0,o.jsx)(r.code,{children:"megatron-ui"})]})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"For React frontend"}),"\n",(0,o.jsxs)(r.li,{children:["Redirect URI: ",(0,o.jsx)(r.code,{children:"http://localhost:3000/*"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:(0,o.jsxs)(r.strong,{children:["Confidential Client: ",(0,o.jsx)(r.code,{children:"megatron-store"})]})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"For Spring Boot backend"}),"\n",(0,o.jsx)(r.li,{children:"Service accounts enabled"}),"\n",(0,o.jsxs)(r.li,{children:["Redirect URI: ",(0,o.jsx)(r.code,{children:"http://localhost:8081/*"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"output",children:"Output"}),"\n",(0,o.jsx)(r.p,{children:"Terraform will output the confidential client\u2019s client secret securely:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-hcl",children:'output "megatron_store_client_secret" {\r\n  value     = keycloak_openid_client.megatron_store.client_secret\r\n  sensitive = true\r\n}\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(r.h3,{id:"provider-not-found",children:"Provider Not Found"}),"\n",(0,o.jsx)(r.p,{children:"If you see:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"Could not retrieve the list of available versions for provider hashicorp/keycloak\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Fix in ",(0,o.jsx)(r.code,{children:"main.tf"}),":"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-hcl",children:'terraform {\r\n  required_providers {\r\n    keycloak = {\r\n      source  = "mrparkers/keycloak"\r\n      version = "~> 4.0"\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h3,{id:"connection-refused",children:"Connection Refused"}),"\n",(0,o.jsx)(r.p,{children:"If you see:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"failed to perform initial login to Keycloak: ... connect: connection refused\n"})}),"\n",(0,o.jsx)(r.p,{children:"Make sure:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Keycloak is running at ",(0,o.jsx)(r.code,{children:"localhost:8080"})]}),"\n",(0,o.jsxs)(r.li,{children:["You're using ",(0,o.jsx)(r.code,{children:'url = "http://host.docker.internal:8080"'})," in provider block"]}),"\n"]}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"references",children:"References"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://registry.terraform.io/providers/mrparkers/keycloak/latest",children:"mrparkers/keycloak Terraform Provider"})}),"\n",(0,o.jsx)(r.li,{children:(0,o.jsx)(r.a,{href:"https://docs.docker.com/desktop/networking/#use-cases-and-workarounds",children:"Docker for Windows - host.docker.internal"})}),"\n"]}),"\n",(0,o.jsx)(r.hr,{})]})}function h(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>t});var i=n(6540);const o={},l=i.createContext(o);function s(e){const r=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(l.Provider,{value:r},e.children)}}}]);