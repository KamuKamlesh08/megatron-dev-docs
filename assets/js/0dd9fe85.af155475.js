"use strict";(self.webpackChunkmegatron_dev_docs=self.webpackChunkmegatron_dev_docs||[]).push([[2300],{2897:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"projects/megatron-kafka-lab/kafka-console-guide","title":"Kafka Console Testing Guide (Docker Setup)","description":"This guide explains how to test Kafka basics using console producer/consumer inside Docker.","source":"@site/docs/projects/megatron-kafka-lab/07-kafka-console-guide.md","sourceDirName":"projects/megatron-kafka-lab","slug":"/projects/megatron-kafka-lab/kafka-console-guide","permalink":"/docs/projects/megatron-kafka-lab/kafka-console-guide","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"docs","previous":{"title":"Kafka Consumers & Consumer Groups","permalink":"/docs/projects/megatron-kafka-lab/kafka-consumer-group"},"next":{"title":"Kafka Advanced Console Lab","permalink":"/docs/projects/megatron-kafka-lab/kafka-advanced-console-lab"}}');var i=n(4848),o=n(8453);const a={},t="Kafka Console Testing Guide (Docker Setup)",c={},l=[{value:"Step 0: Access Kafka container",id:"step-0-access-kafka-container",level:2},{value:"Scenario 1: Produce message with key",id:"scenario-1-produce-message-with-key",level:2},{value:"Create topic",id:"create-topic",level:3},{value:"Verify topic",id:"verify-topic",level:3},{value:"Produce (with key)",id:"produce-with-key",level:3},{value:"Consume (from beginning)",id:"consume-from-beginning",level:3},{value:"Scenario 2: Produce message without key",id:"scenario-2-produce-message-without-key",level:2},{value:"Produce (no key)",id:"produce-no-key",level:3},{value:"Consume (from beginning)",id:"consume-from-beginning-1",level:3},{value:"Note",id:"note",level:3},{value:"Scenario 3: Console consumer with --group",id:"scenario-3-console-consumer-with---group",level:2},{value:"Run consumer with group",id:"run-consumer-with-group",level:3},{value:"Behavior",id:"behavior",level:3},{value:"Scenario 4: Consumers in same group (1 partition)",id:"scenario-4-consumers-in-same-group-1-partition",level:2},{value:"Start two consumers in same group (in two terminals)",id:"start-two-consumers-in-same-group-in-two-terminals",level:3},{value:"Produce messages",id:"produce-messages",level:3},{value:"Observation",id:"observation",level:3},{value:"Scenario 5: Consumers in same group (2 partitions)",id:"scenario-5-consumers-in-same-group-2-partitions",level:2},{value:"Create topic with 2 partitions",id:"create-topic-with-2-partitions",level:3},{value:"Start two consumers in same group (different terminals)",id:"start-two-consumers-in-same-group-different-terminals",level:3},{value:"Produce messages",id:"produce-messages-1",level:3},{value:"Observation",id:"observation-1",level:3},{value:"Scenario 6: Consumers in different groups",id:"scenario-6-consumers-in-different-groups",level:2},{value:"Start consumer in a different group",id:"start-consumer-in-a-different-group",level:3},{value:"Observation",id:"observation-2",level:3},{value:"Useful Verification Commands",id:"useful-verification-commands",level:2},{value:"List topics",id:"list-topics",level:3},{value:"Describe consumer group",id:"describe-consumer-group",level:3},{value:"Recap",id:"recap",level:2}];function p(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"kafka-console-testing-guide-docker-setup",children:"Kafka Console Testing Guide (Docker Setup)"})}),"\n",(0,i.jsx)(r.p,{children:"This guide explains how to test Kafka basics using console producer/consumer inside Docker."}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"step-0-access-kafka-container",children:"Step 0: Access Kafka container"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"docker compose exec -it kafka bash\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"scenario-1-produce-message-with-key",children:"Scenario 1: Produce message with key"}),"\n",(0,i.jsx)(r.h3,{id:"create-topic",children:"Create topic"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092   --create --topic onboarding-requested --partitions 1 --replication-factor 1\n"})}),"\n",(0,i.jsx)(r.h3,{id:"verify-topic",children:"Verify topic"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list\n"})}),"\n",(0,i.jsx)(r.h3,{id:"produce-with-key",children:"Produce (with key)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-producer.sh   --bootstrap-server kafka:9092   --topic onboarding-requested   --property parse.key=true   --property key.separator=:\n"})}),"\n",(0,i.jsx)(r.h3,{id:"consume-from-beginning",children:"Consume (from beginning)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-consumer.sh   --bootstrap-server kafka:9092   --topic onboarding-requested   --from-beginning   --property print.key=true   --property print.partition=true\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"scenario-2-produce-message-without-key",children:"Scenario 2: Produce message without key"}),"\n",(0,i.jsx)(r.h3,{id:"produce-no-key",children:"Produce (no key)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-producer.sh   --bootstrap-server kafka:9092   --topic onboarding-requested\n"})}),"\n",(0,i.jsx)(r.h3,{id:"consume-from-beginning-1",children:"Consume (from beginning)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-consumer.sh   --bootstrap-server kafka:9092   --topic onboarding-requested   --from-beginning   --property print.key=true   --property print.partition=true\n"})}),"\n",(0,i.jsx)(r.h3,{id:"note",children:"Note"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Without ",(0,i.jsx)(r.code,{children:"--from-beginning"}),", consumer will only read ",(0,i.jsx)(r.strong,{children:"new messages"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["This is a ",(0,i.jsx)(r.strong,{children:"console consumer without group"})," \u2192 offsets are ",(0,i.jsx)(r.strong,{children:"not committed"}),"."]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"scenario-3-console-consumer-with---group",children:"Scenario 3: Console consumer with --group"}),"\n",(0,i.jsx)(r.h3,{id:"run-consumer-with-group",children:"Run consumer with group"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-consumer.sh   --bootstrap-server kafka:9092   --topic onboarding-requested   --group group-kyc   --property print.key=true   --property print.partition=true\n"})}),"\n",(0,i.jsx)(r.h3,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Consumer commits offsets in ",(0,i.jsx)(r.code,{children:"__consumer_offsets"}),"."]}),"\n",(0,i.jsx)(r.li,{children:"If restarted, resumes from last committed offset."}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"--from-beginning"})," applies only if group is new and has no committed offsets."]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"scenario-4-consumers-in-same-group-1-partition",children:"Scenario 4: Consumers in same group (1 partition)"}),"\n",(0,i.jsx)(r.h3,{id:"start-two-consumers-in-same-group-in-two-terminals",children:"Start two consumers in same group (in two terminals)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-consumer.sh   --bootstrap-server kafka:9092   --topic onboarding-requested   --group group-kyc   --property print.key=true   --property print.partition=true\n"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-consumer.sh   --bootstrap-server kafka:9092   --topic onboarding-requested   --group group-kyc   --property print.key=true   --property print.partition=true\n"})}),"\n",(0,i.jsx)(r.h3,{id:"produce-messages",children:"Produce messages"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-producer.sh   --bootstrap-server kafka:9092   --topic onboarding-requested   --property parse.key=true   --property key.separator=:\n"})}),"\n",(0,i.jsx)(r.h3,{id:"observation",children:"Observation"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Only ",(0,i.jsx)(r.strong,{children:"one consumer"})," will receive messages (since topic has 1 partition)."]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"scenario-5-consumers-in-same-group-2-partitions",children:"Scenario 5: Consumers in same group (2 partitions)"}),"\n",(0,i.jsx)(r.h3,{id:"create-topic-with-2-partitions",children:"Create topic with 2 partitions"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092   --create --topic kyc-request --partitions 2 --replication-factor 1\n"})}),"\n",(0,i.jsx)(r.h3,{id:"start-two-consumers-in-same-group-different-terminals",children:"Start two consumers in same group (different terminals)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-consumer.sh   --bootstrap-server kafka:9092   --topic kyc-request   --group group-kyc   --property print.key=true   --property print.partition=true\n"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-consumer.sh   --bootstrap-server kafka:9092   --topic kyc-request   --group group-kyc   --property print.key=true   --property print.partition=true\n"})}),"\n",(0,i.jsx)(r.h3,{id:"produce-messages-1",children:"Produce messages"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-producer.sh   --bootstrap-server kafka:9092   --topic kyc-request   --property parse.key=true   --property key.separator=:\n"})}),"\n",(0,i.jsx)(r.h3,{id:"observation-1",children:"Observation"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Consumers split partitions \u2192 each one reads its assigned partition."}),"\n",(0,i.jsx)(r.li,{children:"Same key always goes to the same partition."}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"scenario-6-consumers-in-different-groups",children:"Scenario 6: Consumers in different groups"}),"\n",(0,i.jsx)(r.h3,{id:"start-consumer-in-a-different-group",children:"Start consumer in a different group"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-console-consumer.sh   --bootstrap-server kafka:9092   --topic kyc-request   --group notify-kyc   --property print.key=true   --property print.partition=true\n"})}),"\n",(0,i.jsx)(r.h3,{id:"observation-2",children:"Observation"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Consumers in ",(0,i.jsx)(r.code,{children:"group-kyc"})," share partitions (load balancing)."]}),"\n",(0,i.jsxs)(r.li,{children:["Consumer in ",(0,i.jsx)(r.code,{children:"notify-kyc"})," receives ",(0,i.jsx)(r.strong,{children:"all messages independently"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Real-world use:","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Same group = scaling/load balancing."}),"\n",(0,i.jsx)(r.li,{children:"Different groups = different services consuming same data for different purposes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"useful-verification-commands",children:"Useful Verification Commands"}),"\n",(0,i.jsx)(r.h3,{id:"list-topics",children:"List topics"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list\n"})}),"\n",(0,i.jsx)(r.h3,{id:"describe-consumer-group",children:"Describe consumer group"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"/opt/bitnami/kafka/bin/kafka-consumer-groups.sh   --bootstrap-server kafka:9092   --describe --group group-kyc\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"recap",children:"Recap"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Without group: ephemeral consumer, no offset tracking."}),"\n",(0,i.jsx)(r.li,{children:"With group: offsets committed, resumes from last point."}),"\n",(0,i.jsx)(r.li,{children:"Same group + multiple consumers: partitions are split."}),"\n",(0,i.jsx)(r.li,{children:"Different groups: each gets all messages."}),"\n"]})]})}function d(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>t});var s=n(6540);const i={},o=s.createContext(i);function a(e){const r=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);