"use strict";(self.webpackChunkmegatron_dev_docs=self.webpackChunkmegatron_dev_docs||[]).push([[9598],{644:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/kafka-analogy-eac360d6a38f22cfd8e1686b1cb7c5ac.png"},4521:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"projects/megatron-kafka-lab/kafka-basic-concepts","title":"Kafka = Railway Analogy","description":"Kafka concepts can be simplified using a train system analogy.","source":"@site/docs/projects/megatron-kafka-lab/02-kafka-basic-concepts.md","sourceDirName":"projects/megatron-kafka-lab","slug":"/projects/megatron-kafka-lab/kafka-basic-concepts","permalink":"/docs/projects/megatron-kafka-lab/kafka-basic-concepts","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"docs","previous":{"title":"Kafka: From Legacy Integration to Real-Time Event Streaming","permalink":"/docs/projects/megatron-kafka-lab/overview"},"next":{"title":"Kafka Lab via Docker Compose (KRaft & ZooKeeper)","permalink":"/docs/projects/megatron-kafka-lab/kafka-setup-docker-compose"}}');var i=s(4848),a=s(8453);const t={},o="Kafka = Railway Analogy",c={},l=[{value:"1. Topic",id:"1-topic",level:2},{value:"2. Partition",id:"2-partition",level:2},{value:"3. Offset",id:"3-offset",level:2},{value:"4. Producer",id:"4-producer",level:2},{value:"5. Consumer",id:"5-consumer",level:2},{value:"6. Consumer Group",id:"6-consumer-group",level:2},{value:"7. Offset Commit",id:"7-offset-commit",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"kafka--railway-analogy",children:"Kafka = Railway Analogy"})}),"\n",(0,i.jsxs)(n.p,{children:["Kafka concepts can be simplified using a ",(0,i.jsx)(n.strong,{children:"train system analogy"}),".",(0,i.jsx)(n.br,{}),"\n","Each section below has a ",(0,i.jsx)(n.strong,{children:"definition"})," and a ",(0,i.jsx)(n.strong,{children:"railway analogy"})," side by side."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-topic",children:"1. Topic"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition:"}),(0,i.jsx)(n.br,{}),"\n","A topic is a logical channel in Kafka where messages/events of the same type are stored."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Analogy (Train):"}),(0,i.jsx)(n.br,{}),"\n","A ",(0,i.jsx)(n.strong,{children:"train route"})," \u2014 it defines where the train goes, and only passengers of that route are allowed."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-partition",children:"2. Partition"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition:"}),(0,i.jsx)(n.br,{}),"\n","A topic is split into partitions. Each partition maintains its own ordered sequence of messages."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Analogy (Compartments):"}),(0,i.jsx)(n.br,{}),"\n","A train has ",(0,i.jsx)(n.strong,{children:"compartments"}),". Each compartment has its own seat numbers, just like each partition has its own offsets."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-offset",children:"3. Offset"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition:"}),(0,i.jsx)(n.br,{}),"\n","An offset is a unique sequential ID assigned to every message inside a partition."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Analogy (Seat Number):"}),(0,i.jsx)(n.br,{}),"\n","Each passenger in a compartment has a ",(0,i.jsx)(n.strong,{children:"seat number"}),". Similarly, each message in a partition has an offset."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-producer",children:"4. Producer"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition:"}),(0,i.jsx)(n.br,{}),"\n","A producer is an application or service that sends messages to Kafka topics."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Analogy (Passenger Boarding):"}),(0,i.jsx)(n.br,{}),"\n","A ",(0,i.jsx)(n.strong,{children:"passenger boards the train"})," and sits in a compartment \u2014 the producer sends a message, and Kafka places it in a partition."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-consumer",children:"5. Consumer"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition:"}),(0,i.jsx)(n.br,{}),"\n","A consumer is an application or service that reads messages from Kafka topics."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Analogy (Ticket Checker):"}),(0,i.jsx)(n.br,{}),"\n","A ",(0,i.jsx)(n.strong,{children:"ticket checker"})," goes through compartments and validates passengers. Similarly, consumers read messages from partitions."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-consumer-group",children:"6. Consumer Group"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition:"}),(0,i.jsx)(n.br,{}),"\n","A consumer group is a set of consumers working together to consume data from a topic. Each partition is assigned to only one consumer within a group."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Analogy (Team of Ticket Checkers):"}),(0,i.jsx)(n.br,{}),"\n","Multiple ",(0,i.jsx)(n.strong,{children:"ticket checkers"})," are assigned compartments so no compartment is checked twice."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"7-offset-commit",children:"7. Offset Commit"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition:"}),(0,i.jsx)(n.br,{}),"\n","Consumers store their read progress (last offset processed) in Kafka\u2019s internal ",(0,i.jsx)(n.code,{children:"__consumer_offsets"})," topic."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Analogy (Checking Progress):"}),(0,i.jsx)(n.br,{}),"\n","Ticket checkers mark the ",(0,i.jsx)(n.strong,{children:"last seat they checked"}),". If they leave and come back, they continue from where they left off."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"example-flow-bank-onboarding--kamu-kamlesh",children:"Example Flow (Bank Onboarding \u2013 Kamu Kamlesh)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Scenario:"})," Kamu Kamlesh applies for a new bank account. Let\u2019s map the journey:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Topic Creation (Train Ready)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Admin creates a topic ",(0,i.jsx)(n.code,{children:"onboarding-requested"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Think of it as a ",(0,i.jsx)(n.strong,{children:"train route with 3 compartments (partitions)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Producer Publishes Event (Passenger Boards)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Kamu submits his request."}),"\n",(0,i.jsxs)(n.li,{children:["Producer app sends it \u2192 Kafka places it in ",(0,i.jsx)(n.strong,{children:"Partition-1, Seat #0 (Offset 0)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"More Events (More Seats Occupied)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"Documents uploaded"'})," \u2192 Seat #1."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"KYC Passed"'})," \u2192 Seat #2."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"Account Created"'})," \u2192 Seat #3."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bank Services as Consumers (Ticket Checkers)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Identity Service"})," checks KYC/AML (validates passengers)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Account Service"})," creates the bank account (processes passengers)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Notification Service"})," sends SMS/email (informs passengers)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Offset Commit (Progress Tracking)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Each service commits offsets:",(0,i.jsx)(n.br,{}),"\n","e.g., \u201cChecked till Seat #3\u201d."]}),"\n",(0,i.jsx)(n.li,{children:"On restart, they continue from the last committed seat."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"quick-recap",children:"Quick Recap"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Topic = Train route"})," (channel for related events)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Partition = Compartment"})," (parallelism)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Offset = Seat number"})," (unique message ID)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Producer = Passenger boarding"})," (event creation)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consumer = Ticket checker"})," (service reading events)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consumer Group = Team of ticket checkers"})," (divide work)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Offset Commit = Last checked seat"})," (progress tracking)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Kamu Kamlesh\u2019s onboarding (request \u2192 documents \u2192 KYC \u2192 account creation) is like ",(0,i.jsx)(n.strong,{children:"filling seats in a train"}),", and bank services (ticket checkers) ensure each seat/event is processed and tracked."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"diagram-kafka-railway-analogy",children:"Diagram (Kafka Railway Analogy)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"kafka-analogy",src:s(644).A+"",width:"1235",height:"385"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var r=s(6540);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);