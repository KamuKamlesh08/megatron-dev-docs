"use strict";(self.webpackChunkmegatron_dev_docs=self.webpackChunkmegatron_dev_docs||[]).push([[3328],{6099:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/kafka-partition-085d21f8c92034652176e0cdc19b5bd1.png"},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(6540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},8768:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"projects/megatron-kafka-lab/kafka-partition","title":"Kafka Partitions","description":"---","source":"@site/docs/projects/megatron-kafka-lab/04-kafka-partition.md","sourceDirName":"projects/megatron-kafka-lab","slug":"/projects/megatron-kafka-lab/kafka-partition","permalink":"/docs/projects/megatron-kafka-lab/kafka-partition","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"docs","previous":{"title":"Kafka Lab via Docker Compose (KRaft & ZooKeeper)","permalink":"/docs/projects/megatron-kafka-lab/kafka-setup-docker-compose"},"next":{"title":"Kafka Offsets","permalink":"/docs/projects/megatron-kafka-lab/kafka-offset"}}');var r=i(4848),t=i(8453);const a={},l="Kafka Partitions",o={},c=[{value:"1. What is a Partition?",id:"1-what-is-a-partition",level:2},{value:"2. Advantages of Partitions",id:"2-advantages-of-partitions",level:2},{value:"a) Scalability",id:"a-scalability",level:3},{value:"b) Ordering (within a partition)",id:"b-ordering-within-a-partition",level:3},{value:"c) High Throughput",id:"c-high-throughput",level:3},{value:"3. Which Message Goes to Which Partition?",id:"3-which-message-goes-to-which-partition",level:2},{value:"a) With Key",id:"a-with-key",level:3},{value:"b) Without Key",id:"b-without-key",level:3},{value:"Quick Recap",id:"quick-recap",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"kafka-partitions",children:"Kafka Partitions"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-what-is-a-partition",children:"1. What is a Partition?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.strong,{children:"Partition"})," is a sub-division of a Kafka Topic."]}),"\n",(0,r.jsxs)(n.li,{children:["Each partition is an ",(0,r.jsx)(n.strong,{children:"append-only log"})," where messages are stored in sequence."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"append-only log means - append (add at end). (Random update/insert/delete not allowed)\r\n(deletion of messages take cares by retention policy)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Every message in a partition has a unique number called an ",(0,r.jsx)(n.strong,{children:"Offset"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"Topic is the train"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The train has multiple ",(0,r.jsx)(n.strong,{children:"compartments"}),", which represent the ",(0,r.jsx)(n.strong,{children:"Partitions"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Inside each compartment, seats are arranged in order \u2014 these are the ",(0,r.jsx)(n.strong,{children:"Offsets"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"A passenger (message) gets a seat (offset) inside one compartment (partition)."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-advantages-of-partitions",children:"2. Advantages of Partitions"}),"\n",(0,r.jsx)(n.h3,{id:"a-scalability",children:"a) Scalability"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"More partitions \u2192 more consumers can read in parallel."}),"\n",(0,r.jsx)(n.li,{children:"This increases throughput."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the train has only ",(0,r.jsx)(n.strong,{children:"one compartment"}),", only ",(0,r.jsx)(n.strong,{children:"one ticket checker"})," can verify passengers \u2192 very slow."]}),"\n",(0,r.jsxs)(n.li,{children:["If the train has ",(0,r.jsx)(n.strong,{children:"ten compartments"}),", ten ticket checkers can work ",(0,r.jsx)(n.strong,{children:"in parallel"})," \u2192 faster processing."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"b-ordering-within-a-partition",children:"b) Ordering (within a partition)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Kafka guarantees order ",(0,r.jsx)(n.strong,{children:"within a partition"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Across partitions, global ordering is ",(0,r.jsx)(n.strong,{children:"not guaranteed"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inside Compartment-1, passengers are seated as Seat #0, Seat #1, Seat #2 \u2192 order fixed."}),"\n",(0,r.jsx)(n.li,{children:"Compartment-2 has its own independent seat numbers."}),"\n",(0,r.jsx)(n.li,{children:"Each compartment\u2019s order is preserved, but across compartments, the order can differ."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"c-high-throughput",children:"c) High Throughput"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"With multiple partitions, Kafka can spread messages across them."}),"\n",(0,r.jsx)(n.li,{children:"This allows better load balancing and utilization of multiple servers."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A train with many compartments can carry ",(0,r.jsx)(n.strong,{children:"more passengers at once"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Similarly, a topic with more partitions can handle ",(0,r.jsx)(n.strong,{children:"more messages at higher speed"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-which-message-goes-to-which-partition",children:"3. Which Message Goes to Which Partition?"}),"\n",(0,r.jsx)(n.p,{children:"Kafka decides partition placement in two ways:"}),"\n",(0,r.jsx)(n.h3,{id:"a-with-key",children:"a) With Key"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If a ",(0,r.jsx)(n.strong,{children:"key"})," (e.g., ",(0,r.jsx)(n.code,{children:"customerId"}),") is provided, Kafka uses:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"partition = hash(key) % total_partitions\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["All messages with the same key always go to the ",(0,r.jsx)(n.strong,{children:"same partition"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Key = ",(0,r.jsx)(n.code,{children:'"virat"'})," \u2192 Partition-1"]}),"\n",(0,r.jsxs)(n.li,{children:["Key = ",(0,r.jsx)(n.code,{children:'"rohit"'})," \u2192 Partition-0"]}),"\n",(0,r.jsxs)(n.li,{children:["Key = ",(0,r.jsx)(n.code,{children:'"kamlesh"'})," \u2192 Partition-2"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Passengers are grouped by ",(0,r.jsx)(n.strong,{children:"ticket ID"}),". All tickets with the same ID always go to the ",(0,r.jsx)(n.strong,{children:"same compartment"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"b-without-key",children:"b) Without Key"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If no key is given, Kafka uses a ",(0,r.jsx)(n.strong,{children:"sticky partitioner"})," (or round-robin)."]}),"\n",(0,r.jsx)(n.li,{children:"Messages are distributed across partitions for load balancing."}),"\n",(0,r.jsxs)(n.li,{children:["The same customer\u2019s messages may end up in ",(0,r.jsx)(n.strong,{children:"different partitions"}),", so ordering is not guaranteed."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Virat\u2019s first event \u2192 Partition-0"}),"\n",(0,r.jsx)(n.li,{children:"Virat\u2019s second event \u2192 Partition-2"}),"\n",(0,r.jsx)(n.li,{children:"Ordering per customer is broken."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Train Analogy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If passengers don\u2019t have assigned ticket IDs, they are seated randomly in any available compartment."}),"\n",(0,r.jsx)(n.li,{children:"Next time, they might be seated in a different compartment."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"quick-recap",children:"Quick Recap"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Partition = Train compartment"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Offset = Seat number"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Advantages:"})," Scalability | Ordering per partition | High Throughput"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Partitioning decision:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"With Key \u2192 deterministic (same key \u2192 same partition)"}),"\n",(0,r.jsx)(n.li,{children:"Without Key \u2192 round-robin/sticky, ordering per customer not guaranteed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"kafka-partitions-1",children:"(Kafka Partitions)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Order Partition",src:i(6099).A+"",width:"1316",height:"385"})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);