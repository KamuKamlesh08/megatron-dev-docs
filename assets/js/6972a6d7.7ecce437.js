"use strict";(self.webpackChunkmegatron_dev_docs=self.webpackChunkmegatron_dev_docs||[]).push([[2385],{1426:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"projects/megatron-kafka-lab/kafka-consumer-group","title":"Kafka Consumers & Consumer Groups","description":"---","source":"@site/docs/projects/megatron-kafka-lab/06-kafka-consumer-group.md","sourceDirName":"projects/megatron-kafka-lab","slug":"/projects/megatron-kafka-lab/kafka-consumer-group","permalink":"/docs/projects/megatron-kafka-lab/kafka-consumer-group","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"docs","previous":{"title":"Kafka Offsets","permalink":"/docs/projects/megatron-kafka-lab/kafka-offset"},"next":{"title":"Kafka Console Testing Guide (Docker Setup)","permalink":"/docs/projects/megatron-kafka-lab/kafka-console-guide"}}');var i=s(4848),a=s(8453);const t={},c="Kafka Consumers & Consumer Groups",l={},o=[{value:"1. What is a Consumer?",id:"1-what-is-a-consumer",level:2},{value:"2. What is a Consumer Group?",id:"2-what-is-a-consumer-group",level:2},{value:"3. Why are Consumer Groups Needed?",id:"3-why-are-consumer-groups-needed",level:2},{value:"a) Parallelism",id:"a-parallelism",level:3},{value:"b) Scalability",id:"b-scalability",level:3},{value:"c) Fault Tolerance",id:"c-fault-tolerance",level:3},{value:"4. Real-Time Scenarios",id:"4-real-time-scenarios",level:2},{value:"Scenario 1: Multiple services need the same message",id:"scenario-1-multiple-services-need-the-same-message",level:3},{value:"Scenario 2: Same service has multiple instances",id:"scenario-2-same-service-has-multiple-instances",level:3},{value:"5. FAQ",id:"5-faq",level:2},{value:"What happens if consumers &gt; partitions?",id:"what-happens-if-consumers--partitions",level:3},{value:"Can two different consumer groups read the same topic?",id:"can-two-different-consumer-groups-read-the-same-topic",level:3},{value:"What happens when a new consumer joins a group?",id:"what-happens-when-a-new-consumer-joins-a-group",level:3},{value:"What happens when a consumer crashes or leaves?",id:"what-happens-when-a-consumer-crashes-or-leaves",level:3},{value:"Quick Recap",id:"quick-recap",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"kafka-consumers--consumer-groups",children:"Kafka Consumers & Consumer Groups"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-what-is-a-consumer",children:"1. What is a Consumer?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.strong,{children:"Consumer"})," is an application that reads messages from a Kafka topic."]}),"\n",(0,i.jsx)(n.li,{children:"It can read from one or multiple partitions."}),"\n",(0,i.jsx)(n.li,{children:"Consumers process the messages and usually commit offsets to track progress."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Train Analogy:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Imagine a ",(0,i.jsx)(n.strong,{children:"ticket checker"})," in a train compartment."]}),"\n",(0,i.jsx)(n.li,{children:"He checks passengers (messages) one seat (offset) at a time."}),"\n",(0,i.jsx)(n.li,{children:"Like a consumer, he proceeds in order without skipping."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-what-is-a-consumer-group",children:"2. What is a Consumer Group?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.strong,{children:"Consumer Group"})," is a team of consumers working together to consume a topic."]}),"\n",(0,i.jsxs)(n.li,{children:["All consumers in a group share the same ",(0,i.jsx)(n.strong,{children:"group.id"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Kafka ensures:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Each partition is consumed by ",(0,i.jsx)(n.strong,{children:"only one consumer in the group"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Across different groups, the same partition can be consumed independently."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Train Analogy:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A full ",(0,i.jsx)(n.strong,{children:"team of ticket checkers"})," assigned to a train."]}),"\n",(0,i.jsx)(n.li,{children:"Rule: One compartment (partition) \u2192 only one ticket checker in that group."}),"\n",(0,i.jsxs)(n.li,{children:["If 3 compartments exist:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"1 checker only:"})," He must inspect all 3 compartments (slow)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"3 checkers:"})," Each gets 1 compartment (balanced & fast)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"5 checkers:"})," Two remain idle (no two checkers can inspect the same compartment in the same group)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-why-are-consumer-groups-needed",children:"3. Why are Consumer Groups Needed?"}),"\n",(0,i.jsx)(n.h3,{id:"a-parallelism",children:"a) Parallelism"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple consumers can read different partitions at the same time."}),"\n",(0,i.jsx)(n.li,{children:"More checkers \u2192 faster verification of passengers."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"b-scalability",children:"b) Scalability"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add more consumers in a group to handle higher load."}),"\n",(0,i.jsx)(n.li,{children:"Add more checkers when the train is long and crowded."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"c-fault-tolerance",children:"c) Fault Tolerance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If one consumer fails, Kafka reassigns its partitions to another consumer in the group."}),"\n",(0,i.jsx)(n.li,{children:"If one checker leaves mid-journey, the others take over his compartments."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-real-time-scenarios",children:"4. Real-Time Scenarios"}),"\n",(0,i.jsx)(n.h3,{id:"scenario-1-multiple-services-need-the-same-message",children:"Scenario 1: Multiple services need the same message"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Bank has a topic ",(0,i.jsx)(n.code,{children:"onboarding-requested"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Onboarding Service"})," pushes messages to the topic."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"KYC Management Service"})," consumes messages for identity verification."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Notification Service"})," also consumes the same messages to send SMS/emails."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Each service belongs to a ",(0,i.jsx)(n.strong,{children:"different consumer group"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Kafka delivers the same message independently to each group."}),"\n",(0,i.jsx)(n.li,{children:"Each group maintains its own offsets."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Analogy:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Two different teams of ticket checkers inspect the same train but for different purposes (tickets vs. luggage)."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"scenario-2-same-service-has-multiple-instances",children:"Scenario 2: Same service has multiple instances"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The bank\u2019s ",(0,i.jsx)(n.strong,{children:"KYC Management Service"})," runs 2 instances for load-balancing."]}),"\n",(0,i.jsxs)(n.li,{children:["Both instances belong to the ",(0,i.jsx)(n.strong,{children:"same consumer group"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Kafka divides partitions between them (no duplicates)."}),"\n",(0,i.jsx)(n.li,{children:"Only one instance processes messages from a partition at a time."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the topic has 2 partitions and there are 2 instances \u2192 each instance gets 1 partition."}),"\n",(0,i.jsx)(n.li,{children:"If there are 3 instances but only 2 partitions \u2192 1 instance stays idle."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Analogy:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Two ticket checkers from the same team split compartments."}),"\n",(0,i.jsx)(n.li,{children:"One checker cannot re-check a compartment already assigned to another in the same group."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-faq",children:"5. FAQ"}),"\n",(0,i.jsx)(n.h3,{id:"what-happens-if-consumers--partitions",children:"What happens if consumers > partitions?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Extra consumers remain ",(0,i.jsx)(n.strong,{children:"idle"})," because a partition can be assigned to only one consumer in a group."]}),"\n",(0,i.jsx)(n.li,{children:"Example: 3 compartments and 5 checkers \u2192 2 checkers sit idle."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"can-two-different-consumer-groups-read-the-same-topic",children:"Can two different consumer groups read the same topic?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Yes. Each group maintains its own offsets."}),"\n",(0,i.jsx)(n.li,{children:"Example: One team checks tickets, another checks luggage. Both inspect the same passengers independently."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"what-happens-when-a-new-consumer-joins-a-group",children:"What happens when a new consumer joins a group?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Kafka triggers ",(0,i.jsx)(n.strong,{children:"rebalancing"})," and redistributes partitions among all consumers."]}),"\n",(0,i.jsx)(n.li,{children:"Example: A new checker joins \u2192 compartments are re-divided."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"what-happens-when-a-consumer-crashes-or-leaves",children:"What happens when a consumer crashes or leaves?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Kafka reassigns that consumer\u2019s partitions to the remaining consumers."}),"\n",(0,i.jsx)(n.li,{children:"Example: If one checker leaves, the others share his compartments."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"quick-recap",children:"Quick Recap"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consumer = Ticket checker"})," \u2192 reads messages from a partition."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consumer Group = Team of ticket checkers"})," \u2192 partitions divided among them."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scenario 1:"})," Different services \u2192 different groups \u2192 all receive the same messages."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scenario 2:"})," Multiple instances of the same service \u2192 same group \u2192 partitions split, no duplicates."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Advantages:"})," Parallelism, Scalability, Fault Tolerance."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(6540);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);